'use strict';

var path = require('path');

var db = require(path.resolve('./lib/db.js'));

exports.createTab = createTab;
exports.deleteTab = deleteTab;
exports.getTabById = getTabById;
exports.getTabs = getTabs;
exports.sendTab = sendTab;
exports.updateTab = updateTab;

/////////

/**
  * Helper function that adds role associations to a tab
  *
  * @param {sequelizeModel} tab - the sequelize tab model to add roles to
  * @param {array} roles - an array of strings that represent the name of the roles to add to the tab
  * @returns {promise} - returns a promise with the tab and roles
  */

function addRoles (tab, roles) {

  // Create an object to use with the $or operator
  var or = [];
  roles.forEach(function (role) {
    or.push({name: role});
  });

  // Find role models from the database
  var roleQuery = {
    where: {
      $or: or
    }
  };

  return db.Role.findAll(roleQuery)
    // Set the roles on the tab
    .then(setRoles);

  function setRoles (roles) {
    return tab.setRoles(roles);
  }
}

/**
  * Create a tab
  *
  * @param {ExpressRequestObject} req The request object generated by express.
  * @param {ExpressResponseObject} res The response object generated by express.
  */

function createTab (req, res) {
  // Build the new tab
  var tab = {};
  tab.title = req.body.title;
  tab.uisref = req.body.uisref;
  tab.roles = req.body.roles || ['owner', 'admin'];

  // Create the tab
  db.Tab.create(tab)
    .then(addRolesAndSendTab)
    .catch(send500);

  //////////

  function addRolesAndSendTab (newTab) {
    // Add the roles to the newtab
    return addRoles(newTab, tab.roles)
      .then(sendTab);

    //////////

    function sendTab () {
      var resJson = {};
      resJson.id = newTab.id;
      resJson.title = newTab.title;
      resJson.uisref = newTab.uisref;
      resJson.visibleRoles = tab.roles;
      res.send(resJson);
    }
  }

  function send500 (err) {
    res.status(500).send('Database error: Tab could not be created.');
  }
}

/**
 * Delete tab given in request
 *
 * @param {ExpressRequestObject} req The request object generated by express.
 * @param {ExpressResponseObject} res The response object generated by express.
 */

function deleteTab (req, res) {
  var tabQuery = {
    where: {
      id: req.tab.id
    }
  };

  db.Tab.destroy(tabQuery)
    .then(sendSuccess)
    .catch(sendError);

    //////////

    function sendSuccess () {
      res.status(200).send('Tab deleted');
    }

    function sendError () {
      res.status(500).send('Database Error: could not delete tab');
    }
}

/**
  * Gets a tab by a specific id
  *
  * @param {ExpressRequestObject} req The request object generated by express.
  * @param {ExpressResponseObject} res The response object generated by express.
  * @param {function} next
  * @param {string} id - id of the tab
  */

function getTabById (req, res, next, id) {

  var tabQuery = {
    where: {
      id: id
    },
    include: [{model: db.Role}]
  };

  db.Tab.findOne(tabQuery)
    .then(setTab)
    .catch(sendError);

  //////////

  function setTab (tab) {
    req.tab = tab;
    next();

    function processRoles (role) {
      return role.name;
    }
  }

  function sendError () {
      res.status(404).send('Database Error: could not find tab');
    }
}

/**
 * Get all tabs from database and join their associated roles to the result
 *
 * @param {ExpressRequestObject} req The request object generated by express.
 * @param {ExpressResponseObject} res The response object generated by express.
 */

function getTabs (req, res) {

  var tabQuery = {
    include: [{model: db.Role}]
  };

  db.Tab.findAll(tabQuery)
    .then(processTabsAndSend)
    .catch(sendError);

  //////////

  function processTabsAndSend (tabs) {
    var response = [];
    tabs.forEach(function (tab) {
      var tempTab = {};
      tempTab.title = tab.title;
      tempTab.id = tab.id;
      tempTab.uisref = tab.uisref;
      tempTab.visibleRoles = [];
      tab.Roles.forEach(function (role) {
        tempTab.visibleRoles.push(role.name);
      });
      response.push(tempTab);
    });
    res.send(response);
  }

  function sendError (err) {
    res.send(err);
  }
}

/**
 * Send tab back
 *
 * @param {ExpressRequestObject} req The request object generated by express.
 * @param {ExpressResponseObject} res The response object generated by express.
 */

function sendTab (req, res) {
  if(req.tab) {
    res.send(req.tab);
  } else {
    res.status(400).send('Tab does not exist');
  }
}

/**
 * Update tab
 *
 * @param {ExpressRequestObject} req The request object generated by express.
 * @param {ExpressResponseObject} res The response object generated by express.
 */

function updateTab (req, res) {
  var tab = {};
  tab.title = req.body.title || req.tab.title;
  tab.uisref = req.body.uisref || req.tab.uisref;

  var tabQuery = {
    where: {
      id: req.tab.id
    }
  };

  db.Tab.update(tab, tabQuery)
    .then(setRoles)
    .then(findTab)
    .then(sendUpdatedTab);

  ////////

  function findTab () {
    return db.Tab.findOne({ where: { id: req.tab.id }});
  }

  function sendUpdatedTab (updatedTab) {
    res.send(updatedTab);
  }

  function setRoles () {
    if(req.body.visibleRoles) {

      //if it's empty, set it to null
      if(req.body.visibleRoles.length === 0) {
        req.body.visibleRoles.push(null);
      }
      return updateOneTab();
    } else {
      return;
    }

    function updateOneTab () {
      return db.Tab.findOne({
        where: {id: req.tab.id}
      }).then(function (tab) {
        return addRoles(tab, req.body.visibleRoles);
      });
    }
  }
}
